steal(
	'jquery/controller',
	'jquery/view/ejs',
    'jquery/controller/view',
    'jquery/dom/route',
    'jquery/lang/observe/delegate',
    'docview/models',
    'docview/bootstrap/bootstrap.css',
    'libs/datepicker/css/datepicker.css'
)

// View templates
.then(
    './views/search_box.ejs'
)

// External JS
.then(
    'docview/bootstrap/bootstrap-collapse.js',
    'libs/datepicker/js/bootstrap-datepicker.js'
)

.then(function($) {

    /*
    * Search box containing three types of search:
    *   - document id
    *   - multiple document ids
    *   - advanced search
    */
    $.Controller('Docview.Search',
    /* @Static */
    {
    },
    /* @Prototype */
    {
        init: function() {
            this.element.html(this.view('search_box', {}));

            // Hide box until route conditions are met
            this.element.hide();
            // Hide search types until route conditions are met
            this.element.find('.single').hide();
            this.element.find('.multi').hide();
            this.element.find('.advanced').hide();
	    this.mainTabOn = false;
	    this.filters = [];
            $('.input-date').datepicker();
	    $('#search-box-container div form.single div.single_holder').docview_single();
	    $('#search-box-container div form.multi div.multi_holder').docview_multi();

        },
	setFilters: function(el) {
            var t_filters = [];

            el.find('.filters :checked').each(function() {
                t_filters.push($(this).val());
		
            });
	    this.filters = t_filters;
	},
	reshow : function() {
            this.element.find('.single').hide();
            this.element.find('.multi').hide();
            this.element.find('.advanced').hide();
	//    $('#search-box-container').collapse('show');
	    var sub_cat = $.route.attr('subcategory');
	    var to_show = '.single';
	    
	    if (sub_cat == 'multi') {
		to_show = '.multi';
	    } else if (sub_cat == 'advanced') {
		to_show = '.advanced';
	    }
	    
	    this.element.find(to_show).show();
	    this.element.show();
	},
        '{$.route} category change': function(el, ev, attr, how, newVal, oldVal)  {
            if (newVal === "search") {
		this.reshow();
		this.mainTabOn = true;
            }
            else {
		console.log("check if we are hiding ourself .... " + newVal);
		if (newVal != "document") {
		    console.log(" YES YES YES");
                    this.element.hide();
		    this.mainTabOn = false;

		} else {
		    this.element.hide();
		}
            }
        },
        '{$.route} subcategory change': function(el, ev, attr, how, newVal, oldVal)  {
	    if (this.mainTabOn) {
		this.element.show();

		$('#alerts div.alert').alert('close');
		console.log("sub  " + newVal + " old : " + oldVal);
		if (newVal == undefined && oldVal == "single" && $.route.attr('category') === 'document') {
		    return;
		}


		if (oldVal !== undefined) {
                    this.element.find('.' + oldVal).hide();
		}
		if (newVal !== undefined) {
		    this.reshow();

		    $.route.attr('id', -1);
		    if (newVal != 'single') {
			$('#document-details').hide();

		    } 
		} else {
		    $.route.attr('old', oldVal);
		    this.element.hide();
		}
	    }
        },
        '.single submit': function(el, ev) {
            ev.preventDefault();
	    var ctrl = $('#search-box-container div form.single div.single_holder').controller();
	    
            if (ctrl.validateInput(el)) {
	        // Set clientState's filters and search query
                this.setFilters(el);


                this.options.clientState.attr('search', {
                    ids: [docId],
                    filters: this.filters
                });
                var docId = ctrl.getId();
                $.route.attrs({category: 'document', id: docId}, true);
		this.element.hide();
	    }
        },
        '.multi submit': function(el, ev) {
            ev.preventDefault();
	    var self = this;
	    this.setFilters(el);
	    var ctrl = $('#search-box-container div form.multi div.multi_holder').controller();
            if (ctrl.validateInput(el) ) {
		var ids = ctrl.getIds();

		if (ids.length == 1) {
		    $.route.attrs({category: 'document', id: ids[0]}, true);
		    this.element.hide();
		} else {

		    console.log("about to change the value of search ....");
                    this.options.clientState.attr('search', {
			doc_ids: ids,
			filter: this.filters
                    });
		}
            }
            //this.element.hide();
            /*
            console.log('[Query]', query);
            console.log('[Tokens]', tokens);
            console.log('[IDs]', ids);
            */
        },

        '.advanced submit': function(el, ev) {
            ev.preventDefault();
            
            this.removeFormErrors(el);
            
            // Delimiters: space, comma, newline
            // Anything else would fail verify() later on.

            // Set clientState's filters and search query
            this.setFilters(el);

            this.options.clientState.attr('search', {
                filter: this.filters
            });
            //this.element.hide();
            
            /*
            console.log('[Query]', query);
            console.log('[Tokens]', tokens);
            console.log('[IDs]', ids);
            */
        },

        
        // Filters
        '.select-all click': function(el) {
            this.element.find('.filters .checkbox input').prop("checked", true);
        },
        
        '.deselect-all click': function(el) {
            this.element.find('.filters :checked').prop("checked", false);
        },
        
        // Verifies individual document ids
        verify: function(id) {
            return /^\d{18}$/.test(id);
        },
        
        // Form utility functions
        displayInputError: function(form, name, message) {
            var inputField = form.find('input[name="' + name + '"]');
            inputField.closest('.control-group').addClass('error');
            inputField.after('<span class="help-inline">' + message + '</span>');
        },
        displayTextareaError: function(form, name, message) {
            var inputField = form.find('textarea[name="' + name + '"]');
            inputField.closest('.control-group').addClass('error');
            inputField.after('<span class="help-inline">' + message + '</span>');
        },
        removeFormErrors: function(form) {
            form.find('.error .help-inline').remove();
            form.find('.error').removeClass('error');
        }
    });
});
