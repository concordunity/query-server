steal(
	'jquery/controller',
	'jquery/view/ejs',
    'jquery/controller/view',
    'jquery/dom/route',
    'jquery/lang/observe/delegate',
    'docview/models',    
    'docview/bootstrap/bootstrap.css'
)

// View templates
.then(
    './views/init.ejs',
    './views/roles_table.ejs',
    './views/role_row.ejs',
    './views/edit_role.ejs',
    './views/new_role.ejs'
)

// External JS
.then(
    'docview/bootstrap/bootstrap-button.js',
    'docview/bootstrap/bootstrap-collapse.js',
    'docview/bootstrap/bootstrap-alert.js'
)

.then(function($) {

    /*
    * Manage user accounts and roles
    */
    $.Controller('Docview.Manage.Accounts.Roles',
    /* @Static */
    {
    },
    /* @Prototype */
    {
        init: function() {
            this.element.html(this.view('init'));
            
            // By default we're hidden until the route conditions are met
            this.element.hide();
        },

        // Showing/hiding of this controller
        '{$.route} category change': function(el, ev, attr, how, newVal, oldVal)  {
            // Category and subcategory are edited in a 2 stage process, and if
            // order can't be guaranteed, then it's possible that the 
            // subcategory show() comes before this hide(), which results in 
            // unexpected behavior.
            
            /*if (newVal !== "manage_accounts") {
                this.element.hide();
            }*/
        },
        '{$.route} subcategory change': function(el, ev, attr, how, newVal, oldVal) {
            if (how === "add" || how === "set") {
                if (newVal === "roles") {
                    this.reload();
                    this.element.show();
                }
                else {
                    this.element.hide();
                }
            }
        },
        
        // Data queries
        reload: function() {
            //Docview.Models.User.findAll({}, this.proxy('listUsers'), this.proxy('failure'));
            Docview.Models.Role.findAll({}, this.proxy('listRoles'), this.proxy('failure'));
        },
        listRoles: function(roles) {

	    //console.log("listRoles is called .... ");
	    //console.log(roles);

            this.element.find('.role-list').html(this.view('roles_table', roles));
        },
        failure: function(error) {
            //console.log(error);
        },
        storeRoles: function(roles) {
            // Keep a reference to the list of available roles.
            // This is useful when showing a list of available roles
            // that we can assign to a user.
            this.roles = roles;
          //  console.log(this.roles);
        },
        
        // Creating a user
        '#new-role-btn click': function() {
            // Load up the creation form
            $('#new-role').html(this.view('new_role'));// {roles: [this.roles]}));
        },
        '#new-role-form submit': function(el, ev) {
            ev.preventDefault();
	    var jsonObject = new Object();
            var name = el.find('input[name="name"]').val();
            var desc = el.find('input[name="description"]').val();
	    jsonObject.roleName = name;
	    jsonObject.description = desc;

	    //console.log(el);
	    var formParams = el.find('input[type="checkbox"]');
            var rolePermissions = new Array();
            $.each(formParams, function(key, value) {
		if (value.checked) {
		    rolePermissions.push(value.name);
		}
//		console.log(value.name, + ", " + value.val() + " checked ==" + value.checked);
//	        rolePermissions.push(key);
	    });

            jsonObject.rolePermissions = rolePermissions;

            // Clear any previous error messages in the form
            this.removeFormErrors(el);
            
            // Scan for empty fields (jsmvc can actually do this in the model layer I believe)
            var error = false;
            if (name === "") {
                this.displayFormError(el, "name", "请输入角色名");
                error = true;
            } else {
		// console.log("role name is ====== " + name);
	    }

	    if (rolePermissions.length < 1) {
                this.displayFormError(el, "name", "新角色须至少有一个权限");
                error = true;
	    }
            
            if (!error) {
                /*var user = new Docview.Models.User({
                    username: username,
                    fullname: fullname,
                    roles: [roles],
                    orgs: organizations,
                    password: password,
                    email: email
                });*/
                var role = new Docview.Models.Role(jsonObject);
                
                // Lock the save and cancel buttons
                el.find('.btn-primary').button('loading');
                el.find('.cancel-create').button('loading');
                
                role.save(this.proxy('addRoleRow'));
            }
        },
        '.cancel-create click': function() {
            $('#new-user').collapse('hide');
        },
        addRoleRow: function(role, response) {
            console.log('[Role]', role);
            console.log('[Response]', response);
            if (role.id) {
                // Remove a few unnecessary fields in user
                //delete user.status;
                //delete user.password;
                //delete user.user;
                
//                console.log(user, response);
                
                // Copy over the user id since we don't have that
                
                
                var newRow = $(this.view('role_row', role)).css('display', 'none');
                this.element.find('tbody').prepend(newRow);
                newRow.fadeIn('slow');
            }
            else {
                // Throw an alert
                this.options.clientState.attr('alert', {
                    type: "error",
                    heading: "Error!",
                    message: "There was an error while trying to create this role."
                });
            }
            $('#new-role-form .btn-primary').button('reset');
            $('#new-role-form .cancel-create').button('reset');
        },
        
        // Editing a role
        '.edit-role click': function(el, ev) {
            // In place edit form
            var roleRow = el.closest('tr');
            roleRow.hide();
            roleRow.after(this.view('edit_role', {role: roleRow.model()})); 

	    var role_hack = roleRow.model().display_name;
	    var permissions = role_hack.split(',');
	    $.each(permissions, function(index, value) {
		console.log("about to set " + value + " to checked.");
		$('input[name='+value +']').attr('checked', 'checked');
	    });

        },
        '.edit-role-form submit': function(el, ev) {
            ev.preventDefault();
            
            // Clear any previous error messages in the form
            this.removeFormErrors(el);
            
            var password = el.find('input[name="password"]').val();
            var confirmation = el.find('input[name="password-confirm"]').val();
            if (password !== confirmation) {
                this.displayFormError(el, "password-confirm", "Please confirm your new password");
            }
            else {
                // Update model entry
                // The user model row is a hidden entry right above the edit row
                var user = el.closest('tr').prev().model();
                user.attr('roles', el.find('select').val());
                if (password !== undefined) {
                    user.attr('password', password);
                }
                user.attr('username', el.find('input[name="username"]').val());
                user.attr('orgs', el.find('input[name="organizations"]').val());
                user.attr('email', el.find('input[name="email"]').val());
                
                // Lock the save and cancel buttons
                el.find('.btn-primary').button('loading');
                el.find('.cancel-edit').button('loading');
                
                // Save
                user.save(this.proxy('updateUserRow'));
            }
        },
        '.cancel-edit click': function(el, ev) {
            var editRow = el.closest('tr');
            editRow.prev().show();
            editRow.remove();
        },
        updateUserRow: function(user) {
            var oldRow = user.elements(this.element);
            // Close edit box 
            oldRow.next().remove();
            
            var newRow = $(this.view('user_row', user)).css('display', 'none');
            oldRow.replaceWith(newRow);
            newRow.fadeIn('slow');
        },
        
        // Deleting a user
        '.delete-role click': function(el, ev) {
            el.button('loading');
            if (confirm($.i18n._('msg.confirm.delete_role'))) {
                el.closest('.role').model().destroy();
            }
            else {
                el.button('reset');
            }
        },
        '{Docview.Models.Role} destroyed': function(User, ev, role) {
            role.elements(this.element).remove();
        },
        
        // Form utility functions
        displayFormError: function(form, name, message) {
            var inputField = form.find('input[name="' + name + '"]');
            inputField.closest('.control-group').addClass('error');
            inputField.after('<span class="help-inline">' + message + '</span>');
        },
        removeFormErrors: function(form) {
            form.find('.error > .help-inline').remove();
            form.find('.error').removeClass('error');
        }
    });
});
